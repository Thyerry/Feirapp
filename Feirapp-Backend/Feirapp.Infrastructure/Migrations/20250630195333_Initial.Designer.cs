// <auto-generated />
using System;
using System.Collections.Generic;
using Feirapp.Infrastructure.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Feirapp.Infrastructure.Migrations
{
    [DbContext(typeof(BaseContext))]
    [Migration("20250630195333_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Feirapp.Entities.Entities.Cest", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("NcmCode")
                        .HasColumnType("text")
                        .HasColumnName("ncm_code");

                    b.Property<string>("Segment")
                        .HasColumnType("text")
                        .HasColumnName("segment");

                    b.HasKey("Code");

                    b.HasIndex("NcmCode");

                    b.ToTable("cests");
                });

            modelBuilder.Entity("Feirapp.Entities.Entities.GroceryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.PrimitiveCollection<List<string>>("AltNames")
                        .HasColumnType("text[]")
                        .HasColumnName("alt_names");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("barcode");

                    b.Property<string>("Brand")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("brand");

                    b.Property<string>("CestCode")
                        .HasColumnType("text")
                        .HasColumnName("cest_code");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("image_url");

                    b.Property<string>("MeasureUnit")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("measure_unit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("name");

                    b.Property<string>("NcmCode")
                        .HasColumnType("text")
                        .HasColumnName("ncm_code");

                    b.HasKey("Id");

                    b.HasIndex("Barcode");

                    b.HasIndex("CestCode");

                    b.HasIndex("Name");

                    b.HasIndex("NcmCode");

                    b.ToTable("grocery_items");
                });

            modelBuilder.Entity("Feirapp.Entities.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("code");

                    b.Property<DateTime>("ScanDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scan_date");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("url");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("ScanDate");

                    b.HasIndex("UserId");

                    b.ToTable("invoices");
                });

            modelBuilder.Entity("Feirapp.Entities.Entities.Ncm", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update");

                    b.HasKey("Code");

                    b.ToTable("ncms");
                });

            modelBuilder.Entity("Feirapp.Entities.Entities.PriceLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("barcode");

                    b.Property<Guid>("GroceryItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("grocery_item_id");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_id");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("log_date");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("product_code");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid")
                        .HasColumnName("store_id");

                    b.HasKey("Id");

                    b.HasIndex("Barcode");

                    b.HasIndex("GroceryItemId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("LogDate")
                        .HasDatabaseName("idx_pricelogs_logdate_desc");

                    b.HasIndex("StoreId");

                    b.HasIndex("GroceryItemId", "Barcode", "LogDate", "StoreId")
                        .IsUnique();

                    b.ToTable("price_logs");
                });

            modelBuilder.Entity("Feirapp.Entities.Entities.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.PrimitiveCollection<List<string>>("AltNames")
                        .HasColumnType("text[]")
                        .HasColumnName("alt_names");

                    b.Property<string>("Cep")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("cep");

                    b.Property<string>("CityName")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("city_name");

                    b.Property<string>("Cnpj")
                        .HasColumnType("text")
                        .HasColumnName("cnpj");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("name");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("neighborhood");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("street");

                    b.Property<string>("StreetNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("street_number");

                    b.HasKey("Id");

                    b.HasIndex("AltNames");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AltNames"), "GIN");

                    b.HasIndex("CityName");

                    b.HasIndex("Cnpj")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.ToTable("stores");
                });

            modelBuilder.Entity("Feirapp.Entities.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character(50)")
                        .IsFixedLength();

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Feirapp.Entities.Entities.Cest", b =>
                {
                    b.HasOne("Feirapp.Entities.Entities.Ncm", "Ncm")
                        .WithMany("Cests")
                        .HasForeignKey("NcmCode");

                    b.Navigation("Ncm");
                });

            modelBuilder.Entity("Feirapp.Entities.Entities.GroceryItem", b =>
                {
                    b.HasOne("Feirapp.Entities.Entities.Cest", "Cest")
                        .WithMany("GroceryItems")
                        .HasForeignKey("CestCode");

                    b.HasOne("Feirapp.Entities.Entities.Ncm", "Ncm")
                        .WithMany()
                        .HasForeignKey("NcmCode");

                    b.Navigation("Cest");

                    b.Navigation("Ncm");
                });

            modelBuilder.Entity("Feirapp.Entities.Entities.Invoice", b =>
                {
                    b.HasOne("Feirapp.Entities.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Feirapp.Entities.Entities.PriceLog", b =>
                {
                    b.HasOne("Feirapp.Entities.Entities.GroceryItem", "GroceryItem")
                        .WithMany("PriceHistory")
                        .HasForeignKey("GroceryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Feirapp.Entities.Entities.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");

                    b.HasOne("Feirapp.Entities.Entities.Store", "Store")
                        .WithMany("PriceLogs")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroceryItem");

                    b.Navigation("Invoice");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Feirapp.Entities.Entities.Cest", b =>
                {
                    b.Navigation("GroceryItems");
                });

            modelBuilder.Entity("Feirapp.Entities.Entities.GroceryItem", b =>
                {
                    b.Navigation("PriceHistory");
                });

            modelBuilder.Entity("Feirapp.Entities.Entities.Ncm", b =>
                {
                    b.Navigation("Cests");
                });

            modelBuilder.Entity("Feirapp.Entities.Entities.Store", b =>
                {
                    b.Navigation("PriceLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
